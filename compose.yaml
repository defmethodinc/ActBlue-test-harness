services:
  frontend:
    build: https://${GH_TOKEN}@${FRONTEND_REPO_URL}#${FRONTEND_REF}
    ports:
      - 3000
    networks:
      - app-network
    environment:
      - PUBLIC_URL=${FRONTEND_PUBLIC_URL}
      - WDS_SOCKET_PORT=${WDS_SOCKET_PORT}
  api:
    build: https://${GH_TOKEN}@${API_REPO_URL}#${API_REF}
    ports:
      - 3000
    networks:
      - app-network
    environment:
      - RAILS_RELATIVE_URL_ROOT=${RAILS_RELATIVE_URL_ROOT}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - RAILS_ENV=${RAILS_ENV}
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres
    ports:
      - 5432
    networks:
      - app-network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 3
  backend:
    build: https://${GH_TOKEN}@${BACKEND_REPO_URL}#${BACKEND_REF}
    ports:
      - 3000
    environment:
      - PUBLIC_URL=${BACKEND_PUBLIC_URL}
      - WDS_SOCKET_PORT=${WDS_SOCKET_PORT}
    networks:
      - app-network
  nginx:
    image: nginx:alpine
    ports:
      - 8089:80
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api
      - frontend
      - backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
